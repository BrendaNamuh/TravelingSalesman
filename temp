import networkx as nx
import numpy as np
import plotly.graph_objects as go

# Create a simple graph (use NetworkX for creating and managing graph data)
G = nx.erdos_renyi_graph(6, 1)  # 6 nodes, 50% chance of an edge between nodes

# Get node positions for the graph (using a spring layout for better visualization)
pos = nx.spring_layout(G)
print('Positions: ', pos)
print('Nodes: ', G.nodes())

# Create the base nodes (these will not change between frames)
node_x = [pos[node][0] for node in G.nodes()]
node_y = [pos[node][1] for node in G.nodes()]

# Create the node trace (this will remain constant across all frames)
node_trace = go.Scatter(
    x=node_x,
    y=node_y,
    mode='markers',
    marker=dict(
        showscale=True,
        colorscale='YlGnBu',  # Color scale for nodes
        size=15,
        color=np.random.randn(len(G.nodes())),  # Random node colors
        colorbar=dict(
            thickness=15,
            title="Node Value",
            xanchor="left",
            titleside="right"
        )
    ),
    name='Nodes'
)

# Initial edge data (frame 1, no edges and no arrows)
edges = list(G.edges())
print('Edges: ',edges)

# Define frames for animation (showing different sets of edges at each frame)
frames = []

# Frame 0 (initial state: no edges, no arrows)
frames.append(go.Frame(
    data=[node_trace],  # Only the node trace (no edges or arrows)
    layout=go.Layout(
        annotations=[]  # No arrows in the initial frame
    ),
    name='Frame 0'  # Name the frame for reference
))

for i in range(1, 5):  # 4 frames with different edge subsets
    # Create a subset of edges for each frame (using different numbers of edges)
    edge_subset = edges[:i * 2]  # Show more edges with each frame
    
    # Get x, y coordinates for each edge in the current subset
    edge_x = []
    edge_y = []
    annotations = []  # List of annotations for arrows
    for edge in edge_subset:
        x0, y0 = pos[edge[0]]  # Start node position
        x1, y1 = pos[edge[1]]  # End node position
        edge_x.append(x0)
        edge_x.append(x1)
        edge_y.append(y0)
        edge_y.append(y1)

        # Add arrow annotations
        annotations.append(dict(
            x=x1, y=y1,
            ax=x0, ay=y0,
            axref="x", ayref="y",  # Start point reference
            xref="x", yref="y",  # End point reference
            showarrow=True,
            arrowhead=3,  # Arrowhead style
            arrowsize=2,
            arrowcolor='blue'
        ))

    # Create a frame with the edge subset (arrows for edges)
    frames.append(go.Frame(
        data=[node_trace,  # Always include the node trace
              go.Scatter(
                  x=edge_x, y=edge_y,
                  line=dict(width=2, color='blue'),
                  hoverinfo='none',
                  mode='lines')],
        layout=go.Layout(
            annotations=annotations  # Attach the annotations (arrows)
        ),
        name=f'Frame {i}'  # Name the frame for reference
    ))

# Create the figure
fig = go.Figure(
    data=[node_trace],  # Add node trace to the figure (static across all frames)
    layout=go.Layout(
        title="Graph Animation",
        xaxis=dict(range=[-1, 1]),
        yaxis=dict(range=[-1, 1]),
        showlegend=False,
        hovermode='closest',
        updatemenus=[{
            'buttons': [
                {
                    'args': [None, {'frame': {'duration': 100, 'redraw': True}, 'fromcurrent': True}],
                    'label': 'Play',
                    'method': 'animate',
                },
                {
                    'args': [[None], {'frame': {'duration': 0, 'redraw': True}, 'mode': 'immediate', 'transition': {'duration': 0}}],
                    'label': 'Pause',
                    'method': 'animate',
                },
            ],
            'direction': 'left',
            'pad': {'r': 10, 't': 87},
            'showactive': False,
            'type': 'buttons',
            'x': 0.1,
            'xanchor': 'right',
            'y': 0,
            'yanchor': 'top',
        }],
    ),
    frames=frames  # Attach the frames to the figure
)

# Show the figure
fig.show()
